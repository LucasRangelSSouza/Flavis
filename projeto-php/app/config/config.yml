imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: doctrine_extensions.yml }
    - { resource: @ApplicationSonataUserBundle/Resources/config/services.yml }

sonata_classification:
    class:
        tag:          Application\Sonata\ClassificationBundle\Entity\Tag
        category:     Application\Sonata\ClassificationBundle\Entity\Category
        collection:   Application\Sonata\ClassificationBundle\Entity\Collection

    admin:
        tag:
            class:        Sonata\ClassificationBundle\Admin\TagAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle
        category:
            class:        Sonata\ClassificationBundle\Admin\CategoryAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle
        collection:
            class:        Sonata\ClassificationBundle\Admin\CollectionAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle

framework:
    #esi:             ~
    translator:      {fallback: pt_BR}
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
        form:
            resources:
                - 'AppBundle:Form'
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form:
        resources:
            - 'SonataCoreBundle:Form:datepicker.html.twig'
            #- ShtumiUsefulBundle::fields.html.twig
            - AppBundle:Form:depend_combo_fields.html.twig
            - 'SonataMediaBundle:Form:foto_media_widgets.html.twig'
#            - 'SonataFormatterBundle:Form:formatter.html.twig'
    form_themes:
        - 'AppBundle:Form:fields.html.twig'

    globals:
        perfil_model: "@perfil_model"
        colaborador_model: "@colaborador_model"
        cliente_model: "@cliente_model"
        pmoc_model: "@pmoc_model"
        path_upload_fotos_os: "%kernel.root_dir%/../web/uploads/fotos-os"
        path_upload_fotos_os_web: "uploads/fotos-os"
        os_model: "@os_model"
        relatorio_pmoc_model: "@relatorio_pmoc_model"
        mapeamento_string_model: "@mapeamento_string_model"
#        dashboad_service: "@dashboad_service"

#sonata_formatter:
#    formatters:
#        markdown:
#            service: sonata.formatter.text.markdown
#            extensions:
#                - sonata.formatter.twig.control_flow
#                - sonata.formatter.twig.gist
#        #        - sonata.media.formatter.twig #keep this commented unless you are using media bundle.
#
#
#        text:
#            service: sonata.formatter.text.text
#            extensions:
#                - sonata.formatter.twig.control_flow
#                - sonata.formatter.twig.gist
#        #        - sonata.media.formatter.twig
#
#
#        rawhtml:
#            service: sonata.formatter.text.raw
#            extensions:
#                - sonata.formatter.twig.control_flow
#                - sonata.formatter.twig.gist
#        #        - sonata.media.formatter.twig
#
#
#        richhtml:
#            service: sonata.formatter.text.raw
#            extensions:
#                - sonata.formatter.twig.control_flow
#                - sonata.formatter.twig.gist
#        #        - sonata.media.formatter.twig
#
#
#        twig:
#            service: sonata.formatter.text.twigengine
#            extensions: [] # Twig formatter cannot have extensions

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ AppBundle ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        default_connection: default
        connections:

        default:
            driver:   "%database_driver%"
            host:     "%database_host%"
            port:     "%database_port%"
            dbname:   "%database_name%"
            user:     "%database_user%"
            password: "%database_password%"
            charset:  UTF8
            types:
                json: Sonata\Doctrine\Types\JsonType

        tenant:
            server_version: "9.6"
            driver:   pdo_pgsql
            host:     localhost
            port:     5432
            dbname:   multidb
            user:     postgres
            password: admin
            wrapper_class: AppBundle\Connection\Wrapper

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        default_entity_manager: default

        entity_managers:
            default:
                dql:
                    string_functions:
                        unaccent: AppBundle\DoctrineExtensions\UnaccentString
                naming_strategy: doctrine.orm.naming_strategy.underscore
                auto_mapping:     false # disabled so we can assign entities to our own connections
                connection:       default
                mappings:
                    AppBundle:
                        type:       yml
                        mapping:    true
                        dir:        %kernel.root_dir%/../src/AppBundle/Resources/config/doctrine/App
                        prefix:     AppBundle\Entity
                        is_bundle:  false
                    FOSUserBundle: ~
                    ApplicationSonataUserBundle: ~
                    SonataUserBundle: ~
                    SonataMediaBundle: ~
                    ApplicationSonataMediaBundle: ~
                    SonataClassificationBundle: ~
                    ApplicationSonataClassificationBundle: ~
                filters:
                    soft-deleteable:
                        class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                        enabled: true

            tenant:
                auto_mapping:     false # disabled so we can assign entities to our own connections
                connection:       tenant
                mappings:
                    Invoices:
                        type:       yml
                        mapping:    true
                        dir:        %kernel.root_dir%/../src/AppBundle/Resources/config/doctrine/Client
                        prefix:     Client
                        is_bundle:  false
    dbal:
            types:
                json: Sonata\Doctrine\Types\JsonType

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    port:       587
    encryption: tls
    auth_mode:  login
    spool:     { type: memory }



##########| Sonata Configurations |###############
#------------------------------------------------#
    
sonata_admin:
    security:
        handler: sonata.admin.security.handler.acl

        # acl security information
        information:
            GUEST:    [VIEW, LIST]
            STAFF:    [EDIT, LIST, CREATE]
            EDITOR:   [OPERATOR, EXPORT]
            ADMIN:    [MASTER]

        # permissions not related to an object instance and also to be available when objects do not exist
        # the DELETE admin permission means the user is allowed to batch delete objects
        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]

        # permission related to the objects
        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]

    title: Flavis
    title_logo: /bundles/app/img/logo_app.png
    options:
        title_mode: 'single_image'
    templates:
#        dashboard:  SonataAdminBundle:Core:dashboard.html.twig
        layout:     AppBundle::standard_layout.html.twig
#        layout:  SonataAdminBundle::layout.html.twig
    assets:
        stylesheets:
            # Defaults:
            - bundles/sonatacore/vendor/bootstrap/dist/css/bootstrap.min.css
            - bundles/sonatacore/vendor/components-font-awesome/css/font-awesome.min.css
            - bundles/sonatacore/vendor/ionicons/css/ionicons.min.css
            - bundles/sonataadmin/vendor/admin-lte/dist/css/AdminLTE.min.css
            - bundles/sonataadmin/vendor/admin-lte/dist/css/skins/skin-blue.min.css
            - bundles/sonataadmin/vendor/iCheck/skins/flat/blue.css

            - bundles/sonatacore/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css

            - bundles/sonataadmin/vendor/jqueryui/themes/base/jquery-ui.css

            - bundles/sonatacore/vendor/select2/select2.css
            - bundles/sonatacore/vendor/select2-bootstrap-css/select2-bootstrap.min.css

            - bundles/sonataadmin/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css

            - bundles/sonataadmin/css/styles.css
            - bundles/sonataadmin/css/layout.css
            - bundles/sonataadmin/css/tree.css
            - bundles/app/css/override.css

    dashboard:
        blocks:
#            -
#                class:    col-lg-3 col-xs-6
#                position: top
#                type:     sonata.admin.block.stats
#                settings:
#                    code: app.admin.perfil
#                    icon: fa-user
#                    text: Coaches
#                    color: bg-red
#                    filters:
#                        enabled: { type: 3, value: 1 } # 3 => NumberType::TYPE_EQUAL
#                        locked:  { type: 3, value: 0 } # 3 => NumberType::TYPE_EQUAL

sonata_doctrine_orm_admin:
    audit:
        force: false # Para não criar tabelas tuditadas (_audit) pra todas as entidades

sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.admin.block.stats:
            contexts:   [admin]
        sonata.admin.block.search_result:
            contexts: [admin]
            
sonata_user:
    security_acl: true
    manager_type: orm
    admin:                  # Admin Classes
        user:
            class:          Application\Sonata\UserBundle\Admin\UserAdmin
    profile:
        menu:
            - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'SonataUserBundle'}
            - { route: 'sonata_user_profile_edit_authentication', label: 'link_edit_authentication', domain: 'SonataUserBundle'}


fos_user:
    db_driver:      orm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User

    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager   # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)
    
    service:
        user_manager: sonata.user.orm.user_manager     # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)


simple_things_entity_audit:
    global_ignore_columns:
        - created_at
        - updated_at

jms_serializer:
    metadata:
        auto_detection: true
        directories:
            FOSUB:
                namespace_prefix: "FOS\\UserBundle"
                path: "%kernel.root_dir%/config/serializer/FOSUserBundle"

sensio_framework_extra:
    view: { annotations: false }
    router: { annotations: true }
    request: { converters: true }

fos_rest:
    disable_csrf_role: ROLE_USER_API
    param_fetcher_listener: true
    allowed_methods_listener: true
    access_denied_listener:
        json: true
    body_listener: true
    format_listener: ~
    view:
        view_response_listener: force
        mime_types: ~
        formats:
            json: true
            xml: true
    exception:
        enabled: true
        codes:
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': 404
            'Doctrine\ORM\OptimisticLockException': HTTP_CONFLICT
        messages:
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': true
    service:
        serializer:             jms_serializer

nelmio_api_doc: ~

liip_imagine:
    filter_sets:
        square:
            filters:
                thumbnail: { size: [106, 106], mode: outbound } # Transforms while cropping the width
        square_106:
            filters:
                thumbnail: { size: [106, 106], mode: outbound } # Transforms while cropping the width
        square_125:
            filters:
                thumbnail: { size: [125, 125], mode: outbound } # Transforms while cropping the width
        square_138:
            filters:
                thumbnail: { size: [138, 138], mode: outbound } # Transforms while cropping the width
        square_160:
            filters:
                thumbnail: { size: [160, 160], mode: outbound } # Transforms while cropping the width
        square_188:
            filters:
                thumbnail: { size: [188, 188], mode: outbound } # Transforms while cropping the width
        ranking_thumb:
            filters:
                thumbnail: { size: [125, 125], mode: outbound } # Transforms while cropping the width
        tema_icone:
            filters:
                thumbnail: { size: [128, 128], mode: outbound }

#rms_push_notifications:
#    ios:
#        timeout: "%push_ios_timeout%" # Seconds to wait for connection timeout, default is 60
#        sandbox: "%push_ios_sandbox%"
#        pem: "%push_ios_pem%" # can be absolute or relative path (from app directory)
#        passphrase: "%push_ios_passphrase%"


shtumi_useful :
    dependent_filtered_entities:
        responsavel_por_cliente:
            class: AppBundle:ResponsavelCliente
            parent_property: cliente
            property: nome
            role: ROLE_USER
            no_result_msg: 'Nenhum responsável no cliente selecioando'
            order_property: nome
            order_direction: ASC
        endereco_por_cliente:
            class: AppBundle:Endereco
            parent_property: cliente
            property: cep
            role: ROLE_USER
            no_result_msg: 'Nenhum endereço no cliente selecioando'
            order_property: cep
            order_direction: ASC
        procedimentos_por_equipamento:
            class: AppBundle:AgendamentoManutencaoEquipamento
            parent_property: equipamento
            property: id
            role: ROLE_USER
            no_result_msg: 'Nenhum procedimento no equipamento selecioando'
            order_property: id
            order_direction: ASC
        equipamento_por_embiente:
            class: AppBundle:EquipamentoCliente
            parent_property: ambiente
            property: titulo
            role: ROLE_USER
            no_result_msg: 'Nenhum Equipamento no Ambiente selecioando'
            order_property: titulo
            order_direction: ASC
        ambiente_por_localizacao:
            class: AppBundle:Localizacao
            parent_property: ambiente
            property: titulo
            role: ROLE_USER
            no_result_msg: 'Nenhuma localização no ambiente selecioando'
            order_property: titulo
            order_direction: ASC


sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr it is mandatory to choose one here
    default_context: default # you need to set a context
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.vimeo

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}
        equipamentos:
            providers:
                - sonata.media.provider.image

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}
    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  "%kernel.root_dir%/../web/uploads/media"
            create:     false

