package br.com.logics.flavis.model.repository.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.cliente.Cliente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTE".
*/
public class ClienteDao extends AbstractDao<Cliente, Long> {

    public static final String TABLENAME = "CLIENTE";

    /**
     * Properties of entity Cliente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TipoPessoa = new Property(1, String.class, "tipoPessoa", false, "TIPO_PESSOA");
        public final static Property Nome = new Property(2, String.class, "nome", false, "NOME");
        public final static Property CpfCnpj = new Property(3, String.class, "cpfCnpj", false, "CPF_CNPJ");
        public final static Property RazaoSocial = new Property(4, String.class, "razaoSocial", false, "RAZAO_SOCIAL");
        public final static Property TipoLocal = new Property(5, String.class, "tipoLocal", false, "TIPO_LOCAL");
        public final static Property HorarioAbertura = new Property(6, java.util.Date.class, "horarioAbertura", false, "HORARIO_ABERTURA");
        public final static Property HorarioFechamento = new Property(7, java.util.Date.class, "horarioFechamento", false, "HORARIO_FECHAMENTO");
        public final static Property CreatedAt = new Property(8, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(9, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property IntervaloAlmoco = new Property(10, Integer.class, "intervaloAlmoco", false, "INTERVALO_ALMOCO");
    }

    private DaoSession daoSession;


    public ClienteDao(DaoConfig config) {
        super(config);
    }
    
    public ClienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIPO_PESSOA\" TEXT," + // 1: tipoPessoa
                "\"NOME\" TEXT," + // 2: nome
                "\"CPF_CNPJ\" TEXT," + // 3: cpfCnpj
                "\"RAZAO_SOCIAL\" TEXT," + // 4: razaoSocial
                "\"TIPO_LOCAL\" TEXT," + // 5: tipoLocal
                "\"HORARIO_ABERTURA\" INTEGER," + // 6: horarioAbertura
                "\"HORARIO_FECHAMENTO\" INTEGER," + // 7: horarioFechamento
                "\"CREATED_AT\" INTEGER," + // 8: createdAt
                "\"UPDATED_AT\" INTEGER," + // 9: updatedAt
                "\"INTERVALO_ALMOCO\" INTEGER);"); // 10: intervaloAlmoco
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cliente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tipoPessoa = entity.getTipoPessoa();
        if (tipoPessoa != null) {
            stmt.bindString(2, tipoPessoa);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(3, nome);
        }
 
        String cpfCnpj = entity.getCpfCnpj();
        if (cpfCnpj != null) {
            stmt.bindString(4, cpfCnpj);
        }
 
        String razaoSocial = entity.getRazaoSocial();
        if (razaoSocial != null) {
            stmt.bindString(5, razaoSocial);
        }
 
        String tipoLocal = entity.getTipoLocal();
        if (tipoLocal != null) {
            stmt.bindString(6, tipoLocal);
        }
 
        java.util.Date horarioAbertura = entity.getHorarioAbertura();
        if (horarioAbertura != null) {
            stmt.bindLong(7, horarioAbertura.getTime());
        }
 
        java.util.Date horarioFechamento = entity.getHorarioFechamento();
        if (horarioFechamento != null) {
            stmt.bindLong(8, horarioFechamento.getTime());
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(10, updatedAt.getTime());
        }
 
        Integer intervaloAlmoco = entity.getIntervaloAlmoco();
        if (intervaloAlmoco != null) {
            stmt.bindLong(11, intervaloAlmoco);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cliente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tipoPessoa = entity.getTipoPessoa();
        if (tipoPessoa != null) {
            stmt.bindString(2, tipoPessoa);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(3, nome);
        }
 
        String cpfCnpj = entity.getCpfCnpj();
        if (cpfCnpj != null) {
            stmt.bindString(4, cpfCnpj);
        }
 
        String razaoSocial = entity.getRazaoSocial();
        if (razaoSocial != null) {
            stmt.bindString(5, razaoSocial);
        }
 
        String tipoLocal = entity.getTipoLocal();
        if (tipoLocal != null) {
            stmt.bindString(6, tipoLocal);
        }
 
        java.util.Date horarioAbertura = entity.getHorarioAbertura();
        if (horarioAbertura != null) {
            stmt.bindLong(7, horarioAbertura.getTime());
        }
 
        java.util.Date horarioFechamento = entity.getHorarioFechamento();
        if (horarioFechamento != null) {
            stmt.bindLong(8, horarioFechamento.getTime());
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(10, updatedAt.getTime());
        }
 
        Integer intervaloAlmoco = entity.getIntervaloAlmoco();
        if (intervaloAlmoco != null) {
            stmt.bindLong(11, intervaloAlmoco);
        }
    }

    @Override
    protected final void attachEntity(Cliente entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cliente readEntity(Cursor cursor, int offset) {
        Cliente entity = new Cliente( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tipoPessoa
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nome
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cpfCnpj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // razaoSocial
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tipoLocal
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // horarioAbertura
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // horarioFechamento
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createdAt
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // updatedAt
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // intervaloAlmoco
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cliente entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTipoPessoa(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCpfCnpj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRazaoSocial(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTipoLocal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHorarioAbertura(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setHorarioFechamento(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdatedAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setIntervaloAlmoco(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cliente entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cliente entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cliente entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
