package br.com.logics.flavis.model.repository.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        ClienteDao.createTable(db, ifNotExists);
        JoinClienteWithResponsavelDao.createTable(db, ifNotExists);
        ResponsavelDao.createTable(db, ifNotExists);
        TelefoneDao.createTable(db, ifNotExists);
        TipoTelefoneDao.createTable(db, ifNotExists);
        ColaboradorDao.createTable(db, ifNotExists);
        FuncaoDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        BairroDao.createTable(db, ifNotExists);
        CidadeDao.createTable(db, ifNotExists);
        EnderecoDao.createTable(db, ifNotExists);
        TipoEnderecoDao.createTable(db, ifNotExists);
        EquipamentoDao.createTable(db, ifNotExists);
        MarcaDao.createTable(db, ifNotExists);
        ModeloDao.createTable(db, ifNotExists);
        PropriedadeEquipamentoDao.createTable(db, ifNotExists);
        TituloPropriedadeDao.createTable(db, ifNotExists);
        TituloValorDao.createTable(db, ifNotExists);
        ValorDao.createTable(db, ifNotExists);
        IdleActivityDao.createTable(db, ifNotExists);
        LocationRegisterDao.createTable(db, ifNotExists);
        FotoOSDao.createTable(db, ifNotExists);
        OSDao.createTable(db, ifNotExists);
        ClienteEquipamentoDao.createTable(db, ifNotExists);
        ExecucaoProcedimentoDao.createTable(db, ifNotExists);
        FotoProcedimentoDao.createTable(db, ifNotExists);
        ProcedimentoDao.createTable(db, ifNotExists);
        TituloProcedimentoDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        ClienteDao.dropTable(db, ifExists);
        JoinClienteWithResponsavelDao.dropTable(db, ifExists);
        ResponsavelDao.dropTable(db, ifExists);
        TelefoneDao.dropTable(db, ifExists);
        TipoTelefoneDao.dropTable(db, ifExists);
        ColaboradorDao.dropTable(db, ifExists);
        FuncaoDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        BairroDao.dropTable(db, ifExists);
        CidadeDao.dropTable(db, ifExists);
        EnderecoDao.dropTable(db, ifExists);
        TipoEnderecoDao.dropTable(db, ifExists);
        EquipamentoDao.dropTable(db, ifExists);
        MarcaDao.dropTable(db, ifExists);
        ModeloDao.dropTable(db, ifExists);
        PropriedadeEquipamentoDao.dropTable(db, ifExists);
        TituloPropriedadeDao.dropTable(db, ifExists);
        TituloValorDao.dropTable(db, ifExists);
        ValorDao.dropTable(db, ifExists);
        IdleActivityDao.dropTable(db, ifExists);
        LocationRegisterDao.dropTable(db, ifExists);
        FotoOSDao.dropTable(db, ifExists);
        OSDao.dropTable(db, ifExists);
        ClienteEquipamentoDao.dropTable(db, ifExists);
        ExecucaoProcedimentoDao.dropTable(db, ifExists);
        FotoProcedimentoDao.dropTable(db, ifExists);
        ProcedimentoDao.dropTable(db, ifExists);
        TituloProcedimentoDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ClienteDao.class);
        registerDaoClass(JoinClienteWithResponsavelDao.class);
        registerDaoClass(ResponsavelDao.class);
        registerDaoClass(TelefoneDao.class);
        registerDaoClass(TipoTelefoneDao.class);
        registerDaoClass(ColaboradorDao.class);
        registerDaoClass(FuncaoDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(BairroDao.class);
        registerDaoClass(CidadeDao.class);
        registerDaoClass(EnderecoDao.class);
        registerDaoClass(TipoEnderecoDao.class);
        registerDaoClass(EquipamentoDao.class);
        registerDaoClass(MarcaDao.class);
        registerDaoClass(ModeloDao.class);
        registerDaoClass(PropriedadeEquipamentoDao.class);
        registerDaoClass(TituloPropriedadeDao.class);
        registerDaoClass(TituloValorDao.class);
        registerDaoClass(ValorDao.class);
        registerDaoClass(IdleActivityDao.class);
        registerDaoClass(LocationRegisterDao.class);
        registerDaoClass(FotoOSDao.class);
        registerDaoClass(OSDao.class);
        registerDaoClass(ClienteEquipamentoDao.class);
        registerDaoClass(ExecucaoProcedimentoDao.class);
        registerDaoClass(FotoProcedimentoDao.class);
        registerDaoClass(ProcedimentoDao.class);
        registerDaoClass(TituloProcedimentoDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
