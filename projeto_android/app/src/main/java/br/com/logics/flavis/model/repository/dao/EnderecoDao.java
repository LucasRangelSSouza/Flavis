package br.com.logics.flavis.model.repository.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.endereco.Bairro;
import br.com.logics.flavis.model.entities.endereco.TipoEndereco;

import br.com.logics.flavis.model.entities.endereco.Endereco;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENDERECO".
*/
public class EnderecoDao extends AbstractDao<Endereco, Long> {

    public static final String TABLENAME = "ENDERECO";

    /**
     * Properties of entity Endereco.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TipoEnderecoId = new Property(1, Long.class, "tipoEnderecoId", false, "TIPO_ENDERECO_ID");
        public final static Property BairroId = new Property(2, Long.class, "bairroId", false, "BAIRRO_ID");
        public final static Property Referencia = new Property(3, String.class, "referencia", false, "REFERENCIA");
        public final static Property Complemento = new Property(4, String.class, "complemento", false, "COMPLEMENTO");
        public final static Property Numero = new Property(5, String.class, "numero", false, "NUMERO");
        public final static Property Cep = new Property(6, String.class, "cep", false, "CEP");
        public final static Property Logradouro = new Property(7, String.class, "logradouro", false, "LOGRADOURO");
    }

    private DaoSession daoSession;


    public EnderecoDao(DaoConfig config) {
        super(config);
    }
    
    public EnderecoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENDERECO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIPO_ENDERECO_ID\" INTEGER," + // 1: tipoEnderecoId
                "\"BAIRRO_ID\" INTEGER," + // 2: bairroId
                "\"REFERENCIA\" TEXT," + // 3: referencia
                "\"COMPLEMENTO\" TEXT," + // 4: complemento
                "\"NUMERO\" TEXT," + // 5: numero
                "\"CEP\" TEXT," + // 6: cep
                "\"LOGRADOURO\" TEXT);"); // 7: logradouro
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENDERECO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Endereco entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tipoEnderecoId = entity.getTipoEnderecoId();
        if (tipoEnderecoId != null) {
            stmt.bindLong(2, tipoEnderecoId);
        }
 
        Long bairroId = entity.getBairroId();
        if (bairroId != null) {
            stmt.bindLong(3, bairroId);
        }
 
        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(4, referencia);
        }
 
        String complemento = entity.getComplemento();
        if (complemento != null) {
            stmt.bindString(5, complemento);
        }
 
        String numero = entity.getNumero();
        if (numero != null) {
            stmt.bindString(6, numero);
        }
 
        String cep = entity.getCep();
        if (cep != null) {
            stmt.bindString(7, cep);
        }
 
        String logradouro = entity.getLogradouro();
        if (logradouro != null) {
            stmt.bindString(8, logradouro);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Endereco entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tipoEnderecoId = entity.getTipoEnderecoId();
        if (tipoEnderecoId != null) {
            stmt.bindLong(2, tipoEnderecoId);
        }
 
        Long bairroId = entity.getBairroId();
        if (bairroId != null) {
            stmt.bindLong(3, bairroId);
        }
 
        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(4, referencia);
        }
 
        String complemento = entity.getComplemento();
        if (complemento != null) {
            stmt.bindString(5, complemento);
        }
 
        String numero = entity.getNumero();
        if (numero != null) {
            stmt.bindString(6, numero);
        }
 
        String cep = entity.getCep();
        if (cep != null) {
            stmt.bindString(7, cep);
        }
 
        String logradouro = entity.getLogradouro();
        if (logradouro != null) {
            stmt.bindString(8, logradouro);
        }
    }

    @Override
    protected final void attachEntity(Endereco entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Endereco readEntity(Cursor cursor, int offset) {
        Endereco entity = new Endereco( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tipoEnderecoId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // bairroId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // referencia
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // complemento
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // numero
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cep
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // logradouro
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Endereco entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTipoEnderecoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBairroId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setReferencia(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComplemento(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNumero(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCep(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLogradouro(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Endereco entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Endereco entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Endereco entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTipoEnderecoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBairroDao().getAllColumns());
            builder.append(" FROM ENDERECO T");
            builder.append(" LEFT JOIN TIPO_ENDERECO T0 ON T.\"TIPO_ENDERECO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN BAIRRO T1 ON T.\"BAIRRO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Endereco loadCurrentDeep(Cursor cursor, boolean lock) {
        Endereco entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TipoEndereco tipo = loadCurrentOther(daoSession.getTipoEnderecoDao(), cursor, offset);
        entity.setTipo(tipo);
        offset += daoSession.getTipoEnderecoDao().getAllColumns().length;

        Bairro bairro = loadCurrentOther(daoSession.getBairroDao(), cursor, offset);
        entity.setBairro(bairro);

        return entity;    
    }

    public Endereco loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Endereco> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Endereco> list = new ArrayList<Endereco>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Endereco> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Endereco> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
