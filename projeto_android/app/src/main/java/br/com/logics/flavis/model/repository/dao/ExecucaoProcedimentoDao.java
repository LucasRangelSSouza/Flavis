package br.com.logics.flavis.model.repository.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import br.com.logics.flavis.model.entities.os.procedimento.ClienteEquipamento;
import br.com.logics.flavis.model.entities.os.procedimento.Procedimento;

import br.com.logics.flavis.model.entities.os.procedimento.ExecucaoProcedimento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXECUCAO_PROCEDIMENTO".
*/
public class ExecucaoProcedimentoDao extends AbstractDao<ExecucaoProcedimento, Long> {

    public static final String TABLENAME = "EXECUCAO_PROCEDIMENTO";

    /**
     * Properties of entity ExecucaoProcedimento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OsId = new Property(1, Long.class, "osId", false, "OS_ID");
        public final static Property ProcedimentoPmocId = new Property(2, Long.class, "procedimentoPmocId", false, "PROCEDIMENTO_PMOC_ID");
        public final static Property ClienteEquipamentoId = new Property(3, Long.class, "clienteEquipamentoId", false, "CLIENTE_EQUIPAMENTO_ID");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(5, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property DataAgendadaExecucao = new Property(6, java.util.Date.class, "dataAgendadaExecucao", false, "DATA_AGENDADA_EXECUCAO");
        public final static Property RelatorioAvaliacao = new Property(7, String.class, "relatorioAvaliacao", false, "RELATORIO_AVALIACAO");
        public final static Property FotosSincronizadas = new Property(8, boolean.class, "fotosSincronizadas", false, "FOTOS_SINCRONIZADAS");
        public final static Property Completa = new Property(9, boolean.class, "completa", false, "COMPLETA");
    }

    private DaoSession daoSession;

    private Query<ExecucaoProcedimento> oS_ExecucoesProcedimentosQuery;

    public ExecucaoProcedimentoDao(DaoConfig config) {
        super(config);
    }
    
    public ExecucaoProcedimentoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXECUCAO_PROCEDIMENTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OS_ID\" INTEGER," + // 1: osId
                "\"PROCEDIMENTO_PMOC_ID\" INTEGER," + // 2: procedimentoPmocId
                "\"CLIENTE_EQUIPAMENTO_ID\" INTEGER," + // 3: clienteEquipamentoId
                "\"CREATED_AT\" INTEGER," + // 4: createdAt
                "\"UPDATED_AT\" INTEGER," + // 5: updatedAt
                "\"DATA_AGENDADA_EXECUCAO\" INTEGER," + // 6: dataAgendadaExecucao
                "\"RELATORIO_AVALIACAO\" TEXT," + // 7: relatorioAvaliacao
                "\"FOTOS_SINCRONIZADAS\" INTEGER NOT NULL ," + // 8: fotosSincronizadas
                "\"COMPLETA\" INTEGER NOT NULL );"); // 9: completa
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXECUCAO_PROCEDIMENTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExecucaoProcedimento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long osId = entity.getOsId();
        if (osId != null) {
            stmt.bindLong(2, osId);
        }
 
        Long procedimentoPmocId = entity.getProcedimentoPmocId();
        if (procedimentoPmocId != null) {
            stmt.bindLong(3, procedimentoPmocId);
        }
 
        Long clienteEquipamentoId = entity.getClienteEquipamentoId();
        if (clienteEquipamentoId != null) {
            stmt.bindLong(4, clienteEquipamentoId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(5, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(6, updatedAt.getTime());
        }
 
        java.util.Date dataAgendadaExecucao = entity.getDataAgendadaExecucao();
        if (dataAgendadaExecucao != null) {
            stmt.bindLong(7, dataAgendadaExecucao.getTime());
        }
 
        String relatorioAvaliacao = entity.getRelatorioAvaliacao();
        if (relatorioAvaliacao != null) {
            stmt.bindString(8, relatorioAvaliacao);
        }
        stmt.bindLong(9, entity.getFotosSincronizadas() ? 1L: 0L);
        stmt.bindLong(10, entity.getCompleta() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExecucaoProcedimento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long osId = entity.getOsId();
        if (osId != null) {
            stmt.bindLong(2, osId);
        }
 
        Long procedimentoPmocId = entity.getProcedimentoPmocId();
        if (procedimentoPmocId != null) {
            stmt.bindLong(3, procedimentoPmocId);
        }
 
        Long clienteEquipamentoId = entity.getClienteEquipamentoId();
        if (clienteEquipamentoId != null) {
            stmt.bindLong(4, clienteEquipamentoId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(5, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(6, updatedAt.getTime());
        }
 
        java.util.Date dataAgendadaExecucao = entity.getDataAgendadaExecucao();
        if (dataAgendadaExecucao != null) {
            stmt.bindLong(7, dataAgendadaExecucao.getTime());
        }
 
        String relatorioAvaliacao = entity.getRelatorioAvaliacao();
        if (relatorioAvaliacao != null) {
            stmt.bindString(8, relatorioAvaliacao);
        }
        stmt.bindLong(9, entity.getFotosSincronizadas() ? 1L: 0L);
        stmt.bindLong(10, entity.getCompleta() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(ExecucaoProcedimento entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExecucaoProcedimento readEntity(Cursor cursor, int offset) {
        ExecucaoProcedimento entity = new ExecucaoProcedimento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // osId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // procedimentoPmocId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // clienteEquipamentoId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updatedAt
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dataAgendadaExecucao
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // relatorioAvaliacao
            cursor.getShort(offset + 8) != 0, // fotosSincronizadas
            cursor.getShort(offset + 9) != 0 // completa
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExecucaoProcedimento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProcedimentoPmocId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setClienteEquipamentoId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDataAgendadaExecucao(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setRelatorioAvaliacao(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFotosSincronizadas(cursor.getShort(offset + 8) != 0);
        entity.setCompleta(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExecucaoProcedimento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExecucaoProcedimento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExecucaoProcedimento entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "execucoesProcedimentos" to-many relationship of OS. */
    public List<ExecucaoProcedimento> _queryOS_ExecucoesProcedimentos(Long osId) {
        synchronized (this) {
            if (oS_ExecucoesProcedimentosQuery == null) {
                QueryBuilder<ExecucaoProcedimento> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OsId.eq(null));
                oS_ExecucoesProcedimentosQuery = queryBuilder.build();
            }
        }
        Query<ExecucaoProcedimento> query = oS_ExecucoesProcedimentosQuery.forCurrentThread();
        query.setParameter(0, osId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProcedimentoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getClienteEquipamentoDao().getAllColumns());
            builder.append(" FROM EXECUCAO_PROCEDIMENTO T");
            builder.append(" LEFT JOIN PROCEDIMENTO T0 ON T.\"PROCEDIMENTO_PMOC_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CLIENTE_EQUIPAMENTO T1 ON T.\"CLIENTE_EQUIPAMENTO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExecucaoProcedimento loadCurrentDeep(Cursor cursor, boolean lock) {
        ExecucaoProcedimento entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Procedimento procedimentoPmoc = loadCurrentOther(daoSession.getProcedimentoDao(), cursor, offset);
        entity.setProcedimentoPmoc(procedimentoPmoc);
        offset += daoSession.getProcedimentoDao().getAllColumns().length;

        ClienteEquipamento clienteEquipamento = loadCurrentOther(daoSession.getClienteEquipamentoDao(), cursor, offset);
        entity.setClienteEquipamento(clienteEquipamento);

        return entity;    
    }

    public ExecucaoProcedimento loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExecucaoProcedimento> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExecucaoProcedimento> list = new ArrayList<ExecucaoProcedimento>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExecucaoProcedimento> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExecucaoProcedimento> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
