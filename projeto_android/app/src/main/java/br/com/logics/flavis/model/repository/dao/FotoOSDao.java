package br.com.logics.flavis.model.repository.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import br.com.logics.flavis.model.entities.os.FotoOS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOTO_OS".
*/
public class FotoOSDao extends AbstractDao<FotoOS, Long> {

    public static final String TABLENAME = "FOTO_OS";

    /**
     * Properties of entity FotoOS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OsId = new Property(1, Long.class, "osId", false, "OS_ID");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Titulo = new Property(3, String.class, "titulo", false, "TITULO");
        public final static Property IsSync = new Property(4, boolean.class, "isSync", false, "IS_SYNC");
    }

    private Query<FotoOS> oS_FotosOsQuery;

    public FotoOSDao(DaoConfig config) {
        super(config);
    }
    
    public FotoOSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOTO_OS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OS_ID\" INTEGER," + // 1: osId
                "\"PATH\" TEXT," + // 2: path
                "\"TITULO\" TEXT," + // 3: titulo
                "\"IS_SYNC\" INTEGER NOT NULL );"); // 4: isSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOTO_OS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FotoOS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long osId = entity.getOsId();
        if (osId != null) {
            stmt.bindLong(2, osId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(4, titulo);
        }
        stmt.bindLong(5, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FotoOS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long osId = entity.getOsId();
        if (osId != null) {
            stmt.bindLong(2, osId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(4, titulo);
        }
        stmt.bindLong(5, entity.getIsSync() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FotoOS readEntity(Cursor cursor, int offset) {
        FotoOS entity = new FotoOS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // osId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titulo
            cursor.getShort(offset + 4) != 0 // isSync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FotoOS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitulo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSync(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FotoOS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FotoOS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FotoOS entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fotosOs" to-many relationship of OS. */
    public List<FotoOS> _queryOS_FotosOs(Long osId) {
        synchronized (this) {
            if (oS_FotosOsQuery == null) {
                QueryBuilder<FotoOS> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OsId.eq(null));
                oS_FotosOsQuery = queryBuilder.build();
            }
        }
        Query<FotoOS> query = oS_FotosOsQuery.forCurrentThread();
        query.setParameter(0, osId);
        return query.list();
    }

}
