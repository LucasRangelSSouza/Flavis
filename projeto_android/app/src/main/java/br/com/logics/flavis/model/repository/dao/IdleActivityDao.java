package br.com.logics.flavis.model.repository.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.idle_activity.IdleActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDLE_ACTIVITY".
*/
public class IdleActivityDao extends AbstractDao<IdleActivity, Long> {

    public static final String TABLENAME = "IDLE_ACTIVITY";

    /**
     * Properties of entity IdleActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TimeInMinutes = new Property(1, Integer.class, "timeInMinutes", false, "TIME_IN_MINUTES");
        public final static Property Obs = new Property(2, String.class, "obs", false, "OBS");
        public final static Property IsSync = new Property(3, Boolean.class, "isSync", false, "IS_SYNC");
        public final static Property DataHoraAtividade = new Property(4, java.util.Date.class, "dataHoraAtividade", false, "DATA_HORA_ATIVIDADE");
    }


    public IdleActivityDao(DaoConfig config) {
        super(config);
    }
    
    public IdleActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDLE_ACTIVITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME_IN_MINUTES\" INTEGER," + // 1: timeInMinutes
                "\"OBS\" TEXT," + // 2: obs
                "\"IS_SYNC\" INTEGER," + // 3: isSync
                "\"DATA_HORA_ATIVIDADE\" INTEGER);"); // 4: dataHoraAtividade
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDLE_ACTIVITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IdleActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer timeInMinutes = entity.getTimeInMinutes();
        if (timeInMinutes != null) {
            stmt.bindLong(2, timeInMinutes);
        }
 
        String obs = entity.getObs();
        if (obs != null) {
            stmt.bindString(3, obs);
        }
 
        Boolean isSync = entity.getIsSync();
        if (isSync != null) {
            stmt.bindLong(4, isSync ? 1L: 0L);
        }
 
        java.util.Date dataHoraAtividade = entity.getDataHoraAtividade();
        if (dataHoraAtividade != null) {
            stmt.bindLong(5, dataHoraAtividade.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IdleActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer timeInMinutes = entity.getTimeInMinutes();
        if (timeInMinutes != null) {
            stmt.bindLong(2, timeInMinutes);
        }
 
        String obs = entity.getObs();
        if (obs != null) {
            stmt.bindString(3, obs);
        }
 
        Boolean isSync = entity.getIsSync();
        if (isSync != null) {
            stmt.bindLong(4, isSync ? 1L: 0L);
        }
 
        java.util.Date dataHoraAtividade = entity.getDataHoraAtividade();
        if (dataHoraAtividade != null) {
            stmt.bindLong(5, dataHoraAtividade.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IdleActivity readEntity(Cursor cursor, int offset) {
        IdleActivity entity = new IdleActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // timeInMinutes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // obs
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isSync
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // dataHoraAtividade
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IdleActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeInMinutes(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setObs(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSync(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setDataHoraAtividade(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IdleActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IdleActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IdleActivity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
