package br.com.logics.flavis.model.repository.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.location.LocationRegister;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_REGISTER".
*/
public class LocationRegisterDao extends AbstractDao<LocationRegister, Long> {

    public static final String TABLENAME = "LOCATION_REGISTER";

    /**
     * Properties of entity LocationRegister.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property DataHora = new Property(3, java.util.Date.class, "dataHora", false, "DATA_HORA");
        public final static Property IsSync = new Property(4, boolean.class, "isSync", false, "IS_SYNC");
        public final static Property BatteryLevel = new Property(5, Integer.class, "batteryLevel", false, "BATTERY_LEVEL");
    }


    public LocationRegisterDao(DaoConfig config) {
        super(config);
    }
    
    public LocationRegisterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_REGISTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LATITUDE\" REAL," + // 1: latitude
                "\"LONGITUDE\" REAL," + // 2: longitude
                "\"DATA_HORA\" INTEGER," + // 3: dataHora
                "\"IS_SYNC\" INTEGER NOT NULL ," + // 4: isSync
                "\"BATTERY_LEVEL\" INTEGER);"); // 5: batteryLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_REGISTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationRegister entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        java.util.Date dataHora = entity.getDataHora();
        if (dataHora != null) {
            stmt.bindLong(4, dataHora.getTime());
        }
        stmt.bindLong(5, entity.getIsSync() ? 1L: 0L);
 
        Integer batteryLevel = entity.getBatteryLevel();
        if (batteryLevel != null) {
            stmt.bindLong(6, batteryLevel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationRegister entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        java.util.Date dataHora = entity.getDataHora();
        if (dataHora != null) {
            stmt.bindLong(4, dataHora.getTime());
        }
        stmt.bindLong(5, entity.getIsSync() ? 1L: 0L);
 
        Integer batteryLevel = entity.getBatteryLevel();
        if (batteryLevel != null) {
            stmt.bindLong(6, batteryLevel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocationRegister readEntity(Cursor cursor, int offset) {
        LocationRegister entity = new LocationRegister( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dataHora
            cursor.getShort(offset + 4) != 0, // isSync
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // batteryLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationRegister entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDataHora(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setIsSync(cursor.getShort(offset + 4) != 0);
        entity.setBatteryLevel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationRegister entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationRegister entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationRegister entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
