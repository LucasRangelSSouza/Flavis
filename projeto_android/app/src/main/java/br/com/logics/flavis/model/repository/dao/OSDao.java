package br.com.logics.flavis.model.repository.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.cliente.Cliente;
import br.com.logics.flavis.model.entities.endereco.Endereco;

import br.com.logics.flavis.model.entities.os.OS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OS".
*/
public class OSDao extends AbstractDao<OS, Long> {

    public static final String TABLENAME = "OS";

    /**
     * Properties of entity OS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClienteId = new Property(1, Long.class, "clienteId", false, "CLIENTE_ID");
        public final static Property EnderecoId = new Property(2, Long.class, "enderecoId", false, "ENDERECO_ID");
        public final static Property CreatedAt = new Property(3, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(4, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property DataAbertura = new Property(5, java.util.Date.class, "dataAbertura", false, "DATA_ABERTURA");
        public final static Property DataEncerramento = new Property(6, java.util.Date.class, "dataEncerramento", false, "DATA_ENCERRAMENTO");
        public final static Property Ocorrencia = new Property(7, String.class, "ocorrencia", false, "OCORRENCIA");
        public final static Property Observacao = new Property(8, String.class, "observacao", false, "OBSERVACAO");
        public final static Property Solicitante = new Property(9, String.class, "solicitante", false, "SOLICITANTE");
        public final static Property JustificativaEncerramento = new Property(10, String.class, "justificativaEncerramento", false, "JUSTIFICATIVA_ENCERRAMENTO");
        public final static Property IsPmoc = new Property(11, boolean.class, "isPmoc", false, "IS_PMOC");
        public final static Property IsEncerrada = new Property(12, boolean.class, "isEncerrada", false, "IS_ENCERRADA");
        public final static Property IsHomologada = new Property(13, boolean.class, "isHomologada", false, "IS_HOMOLOGADA");
        public final static Property IsSync = new Property(14, boolean.class, "isSync", false, "IS_SYNC");
        public final static Property Aberta = new Property(15, boolean.class, "aberta", false, "ABERTA");
        public final static Property DataAgendada = new Property(16, java.util.Date.class, "dataAgendada", false, "DATA_AGENDADA");
        public final static Property HoraAgendada = new Property(17, java.util.Date.class, "horaAgendada", false, "HORA_AGENDADA");
        public final static Property ReceptorRg = new Property(18, String.class, "receptorRg", false, "RECEPTOR_RG");
        public final static Property ReceptorNome = new Property(19, String.class, "receptorNome", false, "RECEPTOR_NOME");
        public final static Property RelatorioAvaliacao = new Property(20, String.class, "relatorioAvaliacao", false, "RELATORIO_AVALIACAO");
        public final static Property PathAssinatura = new Property(21, String.class, "pathAssinatura", false, "PATH_ASSINATURA");
        public final static Property IsFinalizada = new Property(22, boolean.class, "isFinalizada", false, "IS_FINALIZADA");
        public final static Property IsFotosSincronizadas = new Property(23, boolean.class, "isFotosSincronizadas", false, "IS_FOTOS_SINCRONIZADAS");
    }

    private DaoSession daoSession;


    public OSDao(DaoConfig config) {
        super(config);
    }
    
    public OSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CLIENTE_ID\" INTEGER," + // 1: clienteId
                "\"ENDERECO_ID\" INTEGER," + // 2: enderecoId
                "\"CREATED_AT\" INTEGER," + // 3: createdAt
                "\"UPDATED_AT\" INTEGER," + // 4: updatedAt
                "\"DATA_ABERTURA\" INTEGER," + // 5: dataAbertura
                "\"DATA_ENCERRAMENTO\" INTEGER," + // 6: dataEncerramento
                "\"OCORRENCIA\" TEXT," + // 7: ocorrencia
                "\"OBSERVACAO\" TEXT," + // 8: observacao
                "\"SOLICITANTE\" TEXT," + // 9: solicitante
                "\"JUSTIFICATIVA_ENCERRAMENTO\" TEXT," + // 10: justificativaEncerramento
                "\"IS_PMOC\" INTEGER NOT NULL ," + // 11: isPmoc
                "\"IS_ENCERRADA\" INTEGER NOT NULL ," + // 12: isEncerrada
                "\"IS_HOMOLOGADA\" INTEGER NOT NULL ," + // 13: isHomologada
                "\"IS_SYNC\" INTEGER NOT NULL ," + // 14: isSync
                "\"ABERTA\" INTEGER NOT NULL ," + // 15: aberta
                "\"DATA_AGENDADA\" INTEGER," + // 16: dataAgendada
                "\"HORA_AGENDADA\" INTEGER," + // 17: horaAgendada
                "\"RECEPTOR_RG\" TEXT," + // 18: receptorRg
                "\"RECEPTOR_NOME\" TEXT," + // 19: receptorNome
                "\"RELATORIO_AVALIACAO\" TEXT," + // 20: relatorioAvaliacao
                "\"PATH_ASSINATURA\" TEXT," + // 21: pathAssinatura
                "\"IS_FINALIZADA\" INTEGER NOT NULL ," + // 22: isFinalizada
                "\"IS_FOTOS_SINCRONIZADAS\" INTEGER NOT NULL );"); // 23: isFotosSincronizadas
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long clienteId = entity.getClienteId();
        if (clienteId != null) {
            stmt.bindLong(2, clienteId);
        }
 
        Long enderecoId = entity.getEnderecoId();
        if (enderecoId != null) {
            stmt.bindLong(3, enderecoId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(5, updatedAt.getTime());
        }
 
        java.util.Date dataAbertura = entity.getDataAbertura();
        if (dataAbertura != null) {
            stmt.bindLong(6, dataAbertura.getTime());
        }
 
        java.util.Date dataEncerramento = entity.getDataEncerramento();
        if (dataEncerramento != null) {
            stmt.bindLong(7, dataEncerramento.getTime());
        }
 
        String ocorrencia = entity.getOcorrencia();
        if (ocorrencia != null) {
            stmt.bindString(8, ocorrencia);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(9, observacao);
        }
 
        String solicitante = entity.getSolicitante();
        if (solicitante != null) {
            stmt.bindString(10, solicitante);
        }
 
        String justificativaEncerramento = entity.getJustificativaEncerramento();
        if (justificativaEncerramento != null) {
            stmt.bindString(11, justificativaEncerramento);
        }
        stmt.bindLong(12, entity.getIsPmoc() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsEncerrada() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsHomologada() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsSync() ? 1L: 0L);
        stmt.bindLong(16, entity.getAberta() ? 1L: 0L);
 
        java.util.Date dataAgendada = entity.getDataAgendada();
        if (dataAgendada != null) {
            stmt.bindLong(17, dataAgendada.getTime());
        }
 
        java.util.Date horaAgendada = entity.getHoraAgendada();
        if (horaAgendada != null) {
            stmt.bindLong(18, horaAgendada.getTime());
        }
 
        String receptorRg = entity.getReceptorRg();
        if (receptorRg != null) {
            stmt.bindString(19, receptorRg);
        }
 
        String receptorNome = entity.getReceptorNome();
        if (receptorNome != null) {
            stmt.bindString(20, receptorNome);
        }
 
        String relatorioAvaliacao = entity.getRelatorioAvaliacao();
        if (relatorioAvaliacao != null) {
            stmt.bindString(21, relatorioAvaliacao);
        }
 
        String pathAssinatura = entity.getPathAssinatura();
        if (pathAssinatura != null) {
            stmt.bindString(22, pathAssinatura);
        }
        stmt.bindLong(23, entity.getIsFinalizada() ? 1L: 0L);
        stmt.bindLong(24, entity.getIsFotosSincronizadas() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long clienteId = entity.getClienteId();
        if (clienteId != null) {
            stmt.bindLong(2, clienteId);
        }
 
        Long enderecoId = entity.getEnderecoId();
        if (enderecoId != null) {
            stmt.bindLong(3, enderecoId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(5, updatedAt.getTime());
        }
 
        java.util.Date dataAbertura = entity.getDataAbertura();
        if (dataAbertura != null) {
            stmt.bindLong(6, dataAbertura.getTime());
        }
 
        java.util.Date dataEncerramento = entity.getDataEncerramento();
        if (dataEncerramento != null) {
            stmt.bindLong(7, dataEncerramento.getTime());
        }
 
        String ocorrencia = entity.getOcorrencia();
        if (ocorrencia != null) {
            stmt.bindString(8, ocorrencia);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(9, observacao);
        }
 
        String solicitante = entity.getSolicitante();
        if (solicitante != null) {
            stmt.bindString(10, solicitante);
        }
 
        String justificativaEncerramento = entity.getJustificativaEncerramento();
        if (justificativaEncerramento != null) {
            stmt.bindString(11, justificativaEncerramento);
        }
        stmt.bindLong(12, entity.getIsPmoc() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsEncerrada() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsHomologada() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsSync() ? 1L: 0L);
        stmt.bindLong(16, entity.getAberta() ? 1L: 0L);
 
        java.util.Date dataAgendada = entity.getDataAgendada();
        if (dataAgendada != null) {
            stmt.bindLong(17, dataAgendada.getTime());
        }
 
        java.util.Date horaAgendada = entity.getHoraAgendada();
        if (horaAgendada != null) {
            stmt.bindLong(18, horaAgendada.getTime());
        }
 
        String receptorRg = entity.getReceptorRg();
        if (receptorRg != null) {
            stmt.bindString(19, receptorRg);
        }
 
        String receptorNome = entity.getReceptorNome();
        if (receptorNome != null) {
            stmt.bindString(20, receptorNome);
        }
 
        String relatorioAvaliacao = entity.getRelatorioAvaliacao();
        if (relatorioAvaliacao != null) {
            stmt.bindString(21, relatorioAvaliacao);
        }
 
        String pathAssinatura = entity.getPathAssinatura();
        if (pathAssinatura != null) {
            stmt.bindString(22, pathAssinatura);
        }
        stmt.bindLong(23, entity.getIsFinalizada() ? 1L: 0L);
        stmt.bindLong(24, entity.getIsFotosSincronizadas() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(OS entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OS readEntity(Cursor cursor, int offset) {
        OS entity = new OS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // clienteId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // enderecoId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createdAt
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updatedAt
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // dataAbertura
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dataEncerramento
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ocorrencia
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // observacao
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // solicitante
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // justificativaEncerramento
            cursor.getShort(offset + 11) != 0, // isPmoc
            cursor.getShort(offset + 12) != 0, // isEncerrada
            cursor.getShort(offset + 13) != 0, // isHomologada
            cursor.getShort(offset + 14) != 0, // isSync
            cursor.getShort(offset + 15) != 0, // aberta
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // dataAgendada
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // horaAgendada
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // receptorRg
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // receptorNome
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // relatorioAvaliacao
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // pathAssinatura
            cursor.getShort(offset + 22) != 0, // isFinalizada
            cursor.getShort(offset + 23) != 0 // isFotosSincronizadas
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClienteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEnderecoId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCreatedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDataAbertura(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDataEncerramento(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setOcorrencia(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setObservacao(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSolicitante(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJustificativaEncerramento(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsPmoc(cursor.getShort(offset + 11) != 0);
        entity.setIsEncerrada(cursor.getShort(offset + 12) != 0);
        entity.setIsHomologada(cursor.getShort(offset + 13) != 0);
        entity.setIsSync(cursor.getShort(offset + 14) != 0);
        entity.setAberta(cursor.getShort(offset + 15) != 0);
        entity.setDataAgendada(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setHoraAgendada(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setReceptorRg(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReceptorNome(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRelatorioAvaliacao(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPathAssinatura(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsFinalizada(cursor.getShort(offset + 22) != 0);
        entity.setIsFotosSincronizadas(cursor.getShort(offset + 23) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OS entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClienteDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEnderecoDao().getAllColumns());
            builder.append(" FROM OS T");
            builder.append(" LEFT JOIN CLIENTE T0 ON T.\"CLIENTE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ENDERECO T1 ON T.\"ENDERECO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OS loadCurrentDeep(Cursor cursor, boolean lock) {
        OS entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Cliente cliente = loadCurrentOther(daoSession.getClienteDao(), cursor, offset);
        entity.setCliente(cliente);
        offset += daoSession.getClienteDao().getAllColumns().length;

        Endereco endereco = loadCurrentOther(daoSession.getEnderecoDao(), cursor, offset);
        entity.setEndereco(endereco);

        return entity;    
    }

    public OS loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OS> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OS> list = new ArrayList<OS>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OS> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OS> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
