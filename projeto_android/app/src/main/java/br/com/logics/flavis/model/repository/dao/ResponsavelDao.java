package br.com.logics.flavis.model.repository.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.logics.flavis.model.entities.cliente.Responsavel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESPONSAVEL".
*/
public class ResponsavelDao extends AbstractDao<Responsavel, Long> {

    public static final String TABLENAME = "RESPONSAVEL";

    /**
     * Properties of entity Responsavel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Funcao = new Property(3, String.class, "funcao", false, "FUNCAO");
        public final static Property Telefone = new Property(4, String.class, "telefone", false, "TELEFONE");
    }


    public ResponsavelDao(DaoConfig config) {
        super(config);
    }
    
    public ResponsavelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESPONSAVEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"EMAIL\" TEXT," + // 2: email
                "\"FUNCAO\" TEXT," + // 3: funcao
                "\"TELEFONE\" TEXT);"); // 4: telefone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESPONSAVEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Responsavel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String funcao = entity.getFuncao();
        if (funcao != null) {
            stmt.bindString(4, funcao);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(5, telefone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Responsavel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String funcao = entity.getFuncao();
        if (funcao != null) {
            stmt.bindString(4, funcao);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(5, telefone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Responsavel readEntity(Cursor cursor, int offset) {
        Responsavel entity = new Responsavel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // funcao
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // telefone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Responsavel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFuncao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelefone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Responsavel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Responsavel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Responsavel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
